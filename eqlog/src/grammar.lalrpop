use crate::ast::*;
use crate::error::*;
use crate::module::*;
use std::iter::once;
use convert_case::{Case, Casing};
use std::mem::swap;

grammar(universe: &mut TermUniverse);

extern {
    type Error = CompileError;
}

Id: String = { r"[A-Za-z][A-Za-z0-9'_]*" => <>.to_string(), }

SortDecl: Sort = {
    <l: @L>  "Sort" <name: Id> ";" <r: @R> => {
        Sort{name, location: Some(Location(l, r))}
    }
}

PredicateDecl: Predicate = {
    <l: @L> "Pred" <name: Id> ":" "*"? <head: Id> <tail: ("*" <Id>)*> ";" <r: @R> => {
        Predicate {
            name,
            arity: once(head).chain(tail).collect(),
            location: Some(Location(l, r)),
        }
    },
    <l: @L> "Pred" <name: Id> ":" "(" ")" ";" <r: @R> => {
        Predicate {
            name,
            arity: vec![],
            location: Some(Location(l, r)),
        }
    },
}

FunctionDecl: Function = {
    <l: @L> "Func" <name: Id> ":" "*"? <head_dom: Id> <tail_dom: ("*" <Id>)*> "->" <cod: Id> ";" <r: @R> => {
        Function {
            name,
            dom: once(head_dom).chain(tail_dom).collect(),
            cod,
            location: Some(Location(l, r)),
        }
    },
    <l: @L> "Func" <name: Id> ":" <cod: Id> ";" <r: @R> => {
        Function {
            name,
            dom: vec![],
            cod,
            location: Some(Location(l, r)),
        }
    },
}

Application: (String, Vec<Term>) = {
    <operator: Id> "(" <head_arg: (<Term>)?> <tail_args: ("," <Term>)*> ")" => {
        let args: Vec<Term> = head_arg.into_iter().chain(tail_args).collect();
        (operator, args)
    }
}

Variable: Term = {
    <l: @L> <var: Id> <r: @R> => {
        universe.new_term(TermData::Variable(var), Some(Location(l, r)))
    },
}
Wildcard: Term = {
    <l: @L> "_" <r: @R> => {
        universe.new_term(TermData::Wildcard, Some(Location(l, r)))
    },
}
ApplicationTerm: Term = {
    <l: @L> <app: Application> <r: @R> => {
        let (func, args) = app;
        universe.new_term(TermData::Application(func, args), Some(Location(l, r)))
    },
}

Term: Term = {
    <var: Variable> => var,
    <wildcard: Wildcard> => wildcard,
    <application: ApplicationTerm> => application,
}

Atom: Atom = {
    <l: @L> <lhs: Term> "=" <rhs: Term> <r: @R> => {
        Atom { data: AtomData::Equal(lhs, rhs), location: Some(Location(l, r)) }
    },
    <l: @L> <app: Application> <r: @R> => {
        let (pred, args) = app;
        Atom { data: AtomData::Predicate(pred, args), location: Some(Location(l, r)) }
    },
    <l: @L> <tm: ApplicationTerm> "!" <r: @R> => {
        Atom { data: AtomData::Defined(tm, None), location: Some(Location(l, r)) }
    },
    <l: @L> <tm: Variable> ":" <s: Id> <r: @R> => {
        Atom { data: AtomData::Defined(tm, Some(s)), location: Some(Location(l, r)) }
    },
    <l: @L> <tm: Wildcard> ":" <s: Id> <r: @R> => {
        Atom { data: AtomData::Defined(tm, Some(s)), location: Some(Location(l, r)) }
    },
}

NonEmptyFormula: Vec<Atom> = {
    "&"? <head_atom: (<Atom>)> <tail_atoms : ("&" <Atom>)*> => {
        once(head_atom).chain(tail_atoms).collect()
    },
}

Formula: Vec<Atom> = {
    <f: NonEmptyFormula> => f,
    () => vec![]
}

pub Sequent: Sequent = {
    <facts: Formula> => {
        let mut u = TermUniverse::new();
        swap(&mut u, universe);
        Sequent::new_implication(u, vec![], facts)
    },
    <premise: NonEmptyFormula> "=>" <conclusion: Formula> => {
        let mut u = TermUniverse::new();
        swap(&mut u, universe);
        Sequent::new_implication(u, premise, conclusion)
    },
    <from: Term> "~>" <to: Term> =>? {
        let mut u = TermUniverse::new();
        swap(&mut u, universe);
        let seq = Sequent::new_reduction(u, Vec::new(), from, to)?;
        Ok(seq)
    },
    <premise: NonEmptyFormula> "=>" <from: Term> "~>" <to: Term> =>? {
        let mut u = TermUniverse::new();
        swap(&mut u, universe);
        let seq = Sequent::new_reduction(u, premise, from, to)?;
        Ok(seq)
    },
}

AxiomDecl: Axiom = {
    <l: @L> "Axiom" <sequent: Sequent> ";" <r: @R> => Axiom {
        sequent,
        location: Some(Location(l, r)),
    },
}

QueryArgument: QueryArgument = {
    <l: @L> <var: Id> <r0: @R> <sort: (":" <Id>)?> <r1: @R> => QueryArgument {
        variable: universe.new_term(TermData::Variable(var), Some(Location(l, r0))),
        sort,
        location: Some(Location(l, r1)),
    }
}

QueryArguments: Vec<QueryArgument> = {
    "(" <head_arg: (<QueryArgument>)?> <tail_args: ("," <QueryArgument>)*> ")" => {
        let args: Vec<QueryArgument> = head_arg.into_iter().chain(tail_args).collect();
        args
    }
}

QueryResult: QueryResult = {
    () => QueryResult::NoResult,
    "->" <term: Term> => QueryResult::SingleResult(term),
    "->" "(" <head_result: (<Term>)?> <tail_results: ("," <Term>)*> ")" => {
        let results: Vec<Term> = head_result.into_iter().chain(tail_results).collect();
        QueryResult::TupleResult(results)
    }
}

QueryDecl: UserQuery = {
    <l: @L>
        "Query"
        <name: Id>
        <arguments: QueryArguments>
        <result: QueryResult>
        <where_formula: ("where" <Formula>)?>
        ";"
        <r: @R> => {

        let mut u = TermUniverse::new();
        swap(&mut u, universe);
        UserQuery {
            universe: u,
            name,
            arguments,
            result,
            where_formula,
            location: Some(Location(l, r)),
        }
    }
}

pub Module: Module = {
    () => Module::new(),
    <mut module: Module> <sort: SortDecl> =>? {
        module.add_sort(sort)?;
        Ok(module)
    },
    <mut module: Module> <pred: PredicateDecl> =>? {
        module.add_predicate(pred)?;
        Ok(module)
    },
    <mut module: Module> <func: FunctionDecl> =>? {
        module.add_function(func)?;
        Ok(module)
    },
    <mut module: Module> <axiom: AxiomDecl> =>? { 
        module.add_axiom(axiom)?;
        Ok(module)
    },
    <mut module: Module> <query: QueryDecl> =>? {
        module.add_query(query)?;
        Ok(module)
    },
}
