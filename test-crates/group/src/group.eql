type El;

func mul(El, El) -> El;
func id() -> El;
func inv(El) -> El;

// Totality.
rule {
    if x: El;
    if y: El;
    then mul(x, y)!;
}
rule {
    then id()!;
}
rule {
    if x: El;
    then inv(x)!;
}

// Associativity.
rule {
    if t_0 = mul(x, y);
    if t_1 = z;
    if to = mul(x, mul(y, z));
    then mul(t_0, t_1) = to;
}
rule {
    if t_0 = x;
    if t_1 = mul(y, z);
    if to = mul(mul(x, y), z);
    then mul(t_0, t_1) = to;
}

// Right identity.
rule {
    if t_0 = x;
    if t_1 = id();
    if to = x;
    then mul(t_0, t_1) = to;
}

// Right invertibility.
rule {
    if t_0 = x;
    if t_1 = inv(x);
    if to = id();
    then mul(t_0, t_1) = to;
}
rule {
    if to = mul(x, inv(x));
    then id() = to;
}
