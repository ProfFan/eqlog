use std::str::FromStr;
use crate::ast::{Def, Tm, Ty};

grammar;

pub Id: String = <s : r"[A-Za-z_][A-Za-z0-9_]*"> => s.to_string();

pub Unit: Vec<Def> =
    Def* => <>;

pub StringLiteral: String = 
  <s : r"'[^']*'"> => s[1 .. s.len() - 1].to_string();

pub Def: Def = {
    "def" <DefBody> "." => <>,
    "dump" <message: StringLiteral?> "." => Def::Dump{ message },
}

pub DefBody: Def =
    <name: Id> <args: Args> ":" <ty: Ty> ":=" <tm: Tm> => Def::Def { <> };

pub Args: Vec<(String, Ty)> =
    ("(" <Id+> ":" <Ty> ")")*
    => <>.into_iter()
         .flat_map(
             |(names, ty)|
             names.into_iter()
                  .map(move |name| (name, ty.clone())))
         .collect();

pub Ty: Ty = {
    "(" <Ty> ")" => <>,
    "Unit" => Ty::Unit,
    "Bool" => Ty::Bool,
    "Nat" => Ty::Nat,
    <left: Tm> "=" <right: Tm> =>
        Ty::Eq(Box::new(left), Box::new(right)),
};

RevArgList : Vec<Tm> = {
    "" => Vec::new(),
    <tm: Tm> => vec![tm],
    <head: Tm> "," <mut tail: RevArgList> => {
        tail.push(head);
        tail
    },
};

pub Tm: Tm = {
    "(" <Tm> ")" => <>,
    "(" <tm: Tm> ":" <ty: Ty> ")" => {
        let tm = Box::new(tm);
        let ty = Box::new(ty);
        Tm::Typed { tm, ty }
    },
    "let" <body: Def*> "in" <result: Tm> => {
        Tm::Let { body,
                  result: Box::new(result) }
		},
    <var: Id> => Tm::Variable(var),
    <fun: Id> "(" <mut args: RevArgList> ")" => {
        args.reverse();
        Tm::App { fun, args}
    },
    "refl" <tm: Tm> => Tm::Refl(Box::new(tm)),
    "unit" => Tm::UnitTm,

    "elim_unit" <discriminee : Tm> "into" "(" <var: Id> ":" "Unit" ")" ":" <into_ty: Ty>
      "|" "unit" "=>" <unit_case: Tm>
    => {
		  	Tm::ElimUnit {
          discriminee: Box::new(discriminee),
					var,
					into_ty: Box::new(into_ty),
					unit_case: Box::new(unit_case),
				}
    },
    "true" => Tm::True,
    "false" => Tm::False,
    "elim_bool" <discriminee : Tm> "into" "(" <var: Id> ":" "Bool" ")" ":" <into_ty: Ty>
      "|" "false" "=>" <false_case: Tm>
      "|" "true" "=>" <true_case: Tm>
    => {
		  	Tm::ElimBool {
          discriminee: Box::new(discriminee),
					var,
					into_ty: Box::new(into_ty),
					false_case: Box::new(false_case),
					true_case: Box::new(true_case),
				}
    },

    "zero" => Tm::Zero,
    "succ" <tm: Tm> => Tm::Succ(Box::new(tm)),
    "elim_nat" <discriminee : Tm> "into" "(" <var: Id> ":" "Nat" ")" ":" <into_ty: Ty>
      "|" "zero" "=>" <zero_case: Tm>
      "|" "(" <succ_case_nat_var: Id> "," <succ_case_prev_var: Id> ")" "=>" <succ_case: Tm>
    => {
      Tm::ElimNat {
				discriminee: Box::new(discriminee),
        var,
        into_ty: Box::new(into_ty),
        zero_case: Box::new(zero_case),
        succ_case_nat_var,
				succ_case_prev_var,
        succ_case: Box::new(succ_case),
			}
    },
};
