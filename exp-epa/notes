
      X.S ----- f.S ------> Y.fS
     /|                     |\
<s> | |                     | | <fs>
     \|                     |/
      X ------- f --------> Y

If T in X.s, need

	f(<s>(T)) = <fs>(f.S(T)).

  f(<s>(T))
= <f, fs>(T)
= (<fs> o f.S)(T)
= <fs>(f.S(T))

f(<s>(T)) = (f o <s>)(T)


  (f o <s>) o w_X
= f o (<s> o w_X)
= f o id
= f


  (fs o f.S) o w_X
= fs o (f.S o w_X)
= fs o (w_Y o f)
= (fs o w_Y) o f
= (id o f)
= f


  (f o <s>)(v_X)
= f(<s>(v_X))
= fs

  (<fs> o f.S)(v_X)
= (<fs>(f.S(v_X))
= <fs>(v_Y)
= fs



# On normal forms of morphisms:

1. Every morphism is of the form

	< ... <<w, s_1>, s_2>, ..., s_n>				(1)

where

  w = Comp(Wkn(gamma_m), Comp(Wkn(gamma_{m - 1}), Comp(..., Id(gamma_0))))				(2)

is a left-associated compositions of weakenings, starting from an identity.
Both n = 0 and m = 0 are allowed.


2. If we have that

	g(f(X))

is defined for some term or type X, then also g o f should be defined and

	g(f(X)) = (g o f)(X)

should hold.
This is to make iterated substitutions work.
The introduction of g o f will potentially violate the normal form assumption, so the following reduction rules are introduced.
The effect of these rules will be that morphisms with a normal form are closed under
- identities
- weakenings
- extensions, i.e. if f has a normal form, then also <f, s> has a normal form for all terms s
- composition, i.e. if g and f have normal forms, then also g o f has a normal form


3. If g o f is defined and

	f = <f', s>

(so in (1) we have n >= 1), then also g o f' and g(s) should be defined, and

	g o f = <g o f', g(s)>

By induction, we may thus assume that n = 0 for f.


4. If g o f is defined with n = 0 for f but m > 0 (so that f is a non-trivial composition of weakenings) and n > 0 for g, so that g = <g', t>, then

  g o f = <g', t> o (p o f') ~> g' o f'.

We may thus assume that if g o f is defined, then n = 0 for f and n = 0 for g.
If m = 0 for g or m = 0 for f, then we are done.
Otherwise we have g = w o g'' for some weakening w, and we have

  g o f = (w o g'') o f ~> w o (g'' o f)

which concludes the reduction inductively.












New appraoch:
- Have some contexts marked as `Active : Ctx`
- Have a predicate `TransExt : Ctx * Ctx` that records whether a context arises from iterated extensions.
- Have the following rule:

    Axiom
	    Active(Cod(f))
      & Cod(g) = Dom(f)
      & TransExt(Dom(g), Dom(g))
      =>
      Comp(f, g)!
  
  This rule has the effect that if 

  Axiom
- Upon applying a function whose definition lives in context gamma into the current active_ scope delta:
  Only add the immediate substitution f : gamma -> delta
