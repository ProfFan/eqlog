type El;
pred le(El, El);
func meet(El, El) -> El;
func join(El, El) -> El;

// Axioms of posets.
rule {
    if x: El;
    then le(x, x);
}
rule {
    if le(x, y);
    if le(y, z);
    then le(x, z);
}
rule {
    if le(x, y);
    if le(y, x);
    then x = y;
}

// Axioms of join.
rule {
    if x: El;
    if y: El;
    then join(x, y)!;
}
rule {
    if join = join(x, y);
    then le(x, join);
    then le(y, join);
}
rule {
    if le(x, z);
    if le(y, z);
    if join = join(x, y);
    then le(join, z);
}

// Axioms of meets, combined into a single rule.
rule {
    if x: El;
    if y: El;
    then m := meet(x, y)!;
    then le(m, x);
    then le(m, y);
    if le(n, x);
    if le(n, y);
    then le(n, m);
}

// Distributivity of joins over meets.
rule {
    if t_0 = x;
    if t_1 = meet(y, z);
    if to = meet(join(x, y), join(x, z));
    then join(t_0, t_1) = to;
}
rule {
    if t_0 = join(x, y);
    if t_1 = join(x, z);
    if to = join(x, meet(y, z));
    then meet(t_0, t_1) = to;
}
