type Obj;
type Mor;

func dom(Mor) -> Obj;
func cod(Mor) -> Obj;
func id(Obj) -> Mor;
func comp(Mor, Mor) -> Mor;

// Fibre products.
type FibreProd;
func left(FibreProd) -> Mor;
func right(FibreProd) -> Mor;
func fibre_prod_obj(FibreProd) -> Obj;
func left_proj(FibreProd) -> Mor;
func right_proj(FibreProd) -> Mor;
func tuple(FibreProd, Mor, Mor) -> Mor;

// Every morphism has a domain and a codomain.
rule {
    if f: Mor;
    then dom(f)!;
    then cod(f)!;
}

// Every object has an identity.
rule {
    if x: Obj;
    then id(x)!;
}

// Composition is defined if and only domain and codomain match.
rule {
    if cod(f) = dom(g);
    then comp(g, f)!;
}
rule {
    if comp(g, f)!;
    if t_0 = f;
    if to = dom(g);
    then cod(t_0) = to;
}
rule {
    if comp(g, f)!;
    if t_0 = g;
    if to = cod(f);
    then dom(t_0) = to;
}

// Domains and codomains of identities.
rule {
    if t_0 = id(x);
    if to = x;
    then dom(t_0) = to;
}
rule {
    if t_0 = id(x);
    if to = x;
    then cod(t_0) = to;
}

// Domains and codomains of compositions.
rule {
    if t_0 = comp(_, f);
    if to = dom(f);
    then dom(t_0) = to;
}
rule {
    if t_0 = comp(g, _);
    if to = cod(g);
    then cod(t_0) = to;
}

// Identity morphisms are left and right identities.
rule {
    if t_0 = id(cod(f));
    if t_1 = f;
    if to = f;
    then comp(t_0, t_1) = to;
}
rule {
    if t_0 = f;
    if t_1 = id(dom(f));
    if to = f;
    then comp(t_0, t_1) = to;
}

// Composition is associative.
rule {
    if t_0 = h;
    if t_1 = comp(g, f);
    if to = comp(comp(h, g), f);
    then comp(t_0, t_1) = to;
}
rule {
    if t_0 = comp(h, g);
    if t_1 = f;
    if to = comp(h, comp(g, f));
    then comp(t_0, t_1) = to;
}

// All data of a prod element exists.
rule {
    if prod: FibreProd;
    then left(prod)!;
    then right(prod)!;
    then fibre_prod_obj(prod)!;
    then left_proj(prod)!;
    then right_proj(prod)!;
}

// A fibre prod element is determined by its data.
rule {
    if left(prod_0) = left(prod_1);
    if right(prod_0) = right(prod_1);
    if fibre_prod_obj(prod_0) = fibre_prod_obj(prod_1);
    if left_proj(prod_0) = left_proj(prod_1);
    if right_proj(prod_0) = right_proj(prod_1);
    then prod_0 = prod_1;
}

// Left and Right legs of a fibre product have the same codomain.
rule {
    if t_0 = left(prod);
    if to = cod(right(prod));
    then cod(t_0) = to;
}
rule {
    if t_0 = right(prod);
    if to = cod(left(prod));
    then cod(t_0) = to;
}

// Domain and codomains of the projections.
rule {
    if t_0 = left_proj(prod);
    if to = fibre_prod_obj(prod);
    then dom(t_0) = to;
}
rule {
    if t_0 = right_proj(prod);
    if to = fibre_prod_obj(prod);
    then dom(t_0) = to;
}
rule {
    if t_0 = left_proj(prod);
    if to = dom(left(prod));
    then cod(t_0) = to;
}
rule {
    if t_0 = right_proj(prod);
    if to = dom(right(prod));
    then cod(t_0) = to;
}

// The projections commute with left and right legs.
rule {
    if t_0 = left(prod);
    if t_1 = left_proj(prod);
    if to = comp(right(prod), right_proj(prod));
    then comp(t_0, t_1) = to;
}
rule {
    if t_0 = right(prod);
    if t_1 = right_proj(prod);
    if to = comp(left(prod), left_proj(prod));
    then comp(t_0, t_1) = to;
}

// Domain and codomain of tuple morphisms.
rule {
    if t_0 = tuple(_, l, _);
    if to = dom(l);
    then dom(t_0) = to;
}
rule {
    if t_0 = tuple(_, _, r);
    if to = dom(r);
    then dom(t_0) = to;
}
rule {
    if t_0 = tuple(prod, _, _);
    if to = fibre_prod_obj(prod);
    then cod(t_0) = to;
}

// Tuple(prod, _, _) is defined for pairs morphisms which commute with Left(prod) and Right(prod).
rule {
    if comp(left(prod), l) = comp(right(prod), r);
    then tuple(prod, l, r)!;
}
// Conversely, if Tuple(prod, l, r) is defined, then l and r commute with Left(prod) and
// Right(prod).
rule {
    if tuple(prod, l, r)!;
    then left(prod)!;
    then comp(left(prod), l)!;
    then right(prod)!;
    then comp(right(prod), r)!;
    then comp(left(prod), l) = comp(right(prod), r);
}

// Tuple(prod, l, r) commutes with l, r and the two projections.
rule {
    if t_0 = left_proj(prod);
    if t_1 = tuple(prod, l, _);
    if to = l;
    then comp(t_0, t_1) = to;
}
rule {
    if t_0 = right_proj(prod);
    if t_1 = tuple(prod, _, r);
    if to = r;
    then comp(t_0, t_1) = to;
}

// Uniqueness of the tuple morphism.
rule {
    if comp(left_proj(prod), s) = l;
    if comp(right_proj(prod), s) = r;
    then tuple(prod, l, r) = s;
}
