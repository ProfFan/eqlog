// The category of contexts and morphisms.
Sort Ctx;
Sort Mor;

// Domains and codomains of morphisms.
Func Dom: Mor -> Ctx;
Query dom(f) -> Dom(f);
Func Cod: Mor -> Ctx;
Query cod(f) -> Cod(f);
// Compositions of morphisms.
Func Comp: Mor * Mor -> Mor;
// Identity morphisms.
Func Id: Ctx -> Mor;

Query id_pre(f: Mor) -> x where f = Id(x);

// Iterator over hom(gamma, delta).
Query hom(gamma, delta) -> f where Dom(f) = gamma & Cod(f) = delta;

// Domains and codomains of identity morphisms.
Axiom Dom(Id(ctx)) ~> ctx;
Axiom Cod(Id(ctx)) ~> ctx;
// Domains and codomains of composed morphisms.
Axiom Dom(Comp(_, f)) ~> Dom(f);
Axiom Cod(Comp(g, _)) ~> Cod(g);

// The set of active contexts.
Pred ActiveCtx : Ctx;

// Identity laws.
Axiom ActiveCtx(Cod(f)) & i = Id(Dom(f)) => Comp(f, i) = f;
Axiom ActiveCtx(ctx) & Cod(f) = ctx & i = Id(ctx) => Comp(i, f) = f;

// Types and terms.
Sort Ty;
Sort Tm;

// The context of a type.
Func TyCtx : Ty -> Ctx;
// The type of a term.
Func TmTy : Tm -> Ty;
Query ty_ctx(ty: Ty) -> TyCtx(ty);
Query tm_ctx(tm: Tm) -> TyCtx(TmTy(tm));

// Substituting types and terms.
Func SubstTy: Mor * Ty-> Ty;
Func SubstTm: Mor * Tm-> Tm;

Query subst_ty_pre(subst_ty: Ty) -> (mor, ty) where subst_ty = SubstTy(mor, ty);
Query subst_tm_pre(subst_tm: Tm) -> (mor, tm) where subst_tm = SubstTm(mor, tm);

// The context of a substituted type.
Axiom TyCtx(SubstTy(f, _)) ~> Cod(f);
// The type of a substituted term.
Axiom TmTy(SubstTm(f, s)) ~> SubstTy(f, TmTy(s));

// Substitution along identity morphisms.
Axiom SubstTy(Id(TyCtx(sigma)), sigma) ~> sigma;
Axiom SubstTm(Id(TyCtx(TmTy(s))), s) ~> s;

// Substitution along composed morphisms.
Axiom SubstTy(Comp(g, f), sigma) ~> SubstTy(g, SubstTy(f, sigma));
Axiom SubstTy(g, SubstTy(f, sigma)) ~> SubstTy(Comp(g, f), sigma);
Axiom SubstTm(Comp(g, f), s) ~> SubstTm(g, SubstTm(f, s));
Axiom SubstTm(g, SubstTm(f, s)) ~> SubstTm(Comp(g, f), s);

// Partial functions assigning to extended contexts data:
// - The base context.
Func BaseCtx: Ctx -> Ctx;
// - The weakening from the base context.
Func ExtWkn: Ctx -> Mor;
// - The type in the base context by which it is extended.
Func ExtTy: Ctx -> Ty;
// - The variable term.
Func ExtVar: Ctx -> Tm;
// - Extended morphisms ExtMor(gamma, f, s) : gamma -> delta, where
//   * f : BaseCtx(gamma) -> delta
//   * delta |- s : SubstTy(f, ExtTy(gamma))
Func ExtMor: Ctx * Mor * Tm -> Mor;

// Signature of weakenings.
Axiom Dom(ExtWkn(gamma)) ~> BaseCtx(gamma);
Axiom Cod(ExtWkn(gamma)) ~> gamma;
// The type of the variable term.
Axiom TmTy(ExtVar(gamma)) ~> SubstTy(ExtWkn(gamma), ExtTy(gamma));
// Domain and codomain of extended morphisms.
Axiom Dom(ExtMor(gamma, _, _)) ~> gamma;
Axiom Cod(ExtMor(_, f, _)) ~> Cod(f);
// Commutativity of extended morphisms with the weakening and the base
// morphism.
Axiom f_0 = Comp(ExtMor(gamma, f, _), ExtWkn(gamma)) => f_0 = f;
// Image of the variable under extended morphisms.
Axiom SubstTm(ExtMor(gamma, _, s), ExtVar(gamma)) ~> s;

// The transitive reflexive closure of context extension.
Pred CtxExt: Ctx * Ctx;
Axiom a = BaseCtx(b) => CtxExt(a, b);
Axiom a: Ctx => CtxExt(a, a);
Axiom CtxExt(a, b) & CtxExt(b, c) => CtxExt(a, c);

// Iterated substitutions.
Axiom SubstTm(g, SubstTm(f, s)) ~> SubstTm(Comp(g, f), s);
Axiom SubstTy(g, SubstTy(f, sigma)) ~> SubstTy(Comp(g, f), sigma);

// We add new composed morphisms g o f in the following situation:
// - The codomain of g is an active context.
// - The signatures of g and f match.
// - f is a substitution from an inner scope of Dom(g) into Dom(g).
// - f = <f0, s> is an extended morphism for some term s in the domain of f0.
// - The substitution g[s] is defined.
// In this situation, we have Comp(g, f) = <g o f_0, g[s]>.
Axiom
  ActiveCtx(Cod(g))
  & Cod(f) = Dom(g)
  & CtxExt(Cod(f), Dom(f))
  & f = ExtMor(gamma, f_0, s)
  & SubstTm(g, s)!
  & Comp(g, f_0)!
  =>
  ExtMor(gamma, Comp(g, f_0), SubstTm(g, s))! &
  ExtMor(gamma, Comp(g, f_0), SubstTm(g, s)) = Comp(g, f)
  ;

// The equality
//   ExtMor(gamma, f, _) o ExtWkn(gamma) = f
// in a version that works for compositions of weakenings instead of
// just a single one.
Axiom 
  & ActiveCtx(Cod(g_0))
  =>
  Comp(ExtMor(gamma, g_0, _), Comp(ExtWkn(gamma), w_0))
  <~>
  Comp(g_0, w_0)
  ;

// The equality
//   g o ExtMor(gamma, f, s) = ExtMor(gamma, g o f, g[s]).
Axiom
  & ActiveCtx(Cod(g))
  =>
  ExtMor(gamma, Comp(g, f_0), SubstTm(g, s))
  <~>
  Comp(g, ExtMor(gamma, f_0, s))
  ;

// The unit type.
Func Unit: Ctx -> Ty;
// The unique term of the unit type.
Func UnitTm: Ctx -> Tm;
// The induction principle for the unit type. Arguments:
// - The type we eliminate into. Must live in an extended context.
// - The term for the case where the variable is UnitTm.
Func UnitInd: Ty * Tm -> Tm;

// Context of unit types.
Axiom TyCtx(Unit(ctx)) ~> ctx;
// Types of unit terms.
Axiom TmTy(UnitTm(ctx)) ~> Unit(ctx);
// Substitution stability of unit types.
Axiom SubstTy(f, Unit(Dom(f))) ~> Unit(Cod(f));
// Substitution stability of unit terms.
Axiom SubstTm(f, UnitTm(Dom(f))) ~> UnitTm(Cod(f));
// Type of unit induction terms.
Axiom TmTy(UnitInd(sigma, _)) ~> sigma;
// Evaluation rule for unit induction.
Axiom
	c = UnitInd(sigma, unit_case) &
	f_unit = ExtMor(TyCtx(sigma), f, UnitTm(Cod(f)))
	=>
	SubstTm(f_unit, c) ~> SubstTm(f, unit_case)
	;

// Implicitly adding morphisms to detect substitutions of unit inductions.
Axiom
  // There is a unit induction term `ui_dom`.
  & ui_dom = UnitInd(sigma_dom, case)
  // Its type lives in context `sigma_dom_ctx`.
  & sigma_dom_ctx = TyCtx(sigma_dom)
  // There is a morphism `f` with domain the base of `sigma_dom_ctx`.
  & Dom(f) = BaseCtx(sigma_dom_ctx)
  // `f` is a morphism into an active context.
  & ActiveCtx(Cod(f))
	// There is a unit induction term whose case is given by the substitution of the case of the
	// previous UnitInd. This automatically implies that `sigma_cod` must live in a context extension
	// of the codomain of f by Unit.
  & ui_cod = UnitInd(sigma_cod, SubstTm(f, case))
  // `sigma_cod_ctx` is the context of `ui_cod` and `sigma_cod`.
  & sigma_cod_ctx = TyCtx(sigma_cod)
  // The domain unit induction is applied to some discriminee.
  & SubstTm(ExtMor(sigma_dom_ctx, Id(_), discriminee_dom), ui_dom)!
  // ... and so is the codomain unit induction.
  & SubstTm(ExtMor(sigma_cod_ctx, Id(_), SubstTm(f, discriminee_dom)), ui_cod)!
  =>
  // Then we have that the map
  //
  //   f.Unit : Dom(f).Unit -> Cod(f).Unit
  //
  // is defined that is given by sending the variable for the domain to the variable in the
  // codomain.
  ExtMor(sigma_dom_ctx, Comp(ExtWkn(sigma_cod_ctx), f), ExtVar(sigma_cod_ctx))!
  ;

// Substitution stability of unit induction.
Axiom
  // There is a uni induction term `ui_dom`.
  & ui_dom = UnitInd(sigma_dom, case)
  // It and its type lives in context `sigma_dom_ctx`.
  & sigma_dom_ctx = TyCtx(sigma_dom)
  // There is a morphism with domain the base context of `sigma_dom_ctx`.
  & Dom(f) = BaseCtx(sigma_dom_ctx)
  // The codomain of `f` is active.
  & ActiveCtx(Cod(f))
	// There is a unit induction term `ui_cod` given by the substitutions of the case along `f`. This
	// implies that `ui_cod` must live in a context extension of Cod(f) by Unit.
  & ui_cod = UnitInd(sigma_cod, SubstTm(f, case))
  // `sigma_cod_ctx` is the context of `ui_cod` and `sigma_cod`.
  & sigma_cod_ctx = TyCtx(sigma_cod)
  // `f_unit` is the evident map `Dom(f).Unit -> Cod(f).Unit`.
  & f_unit = ExtMor(sigma_dom_ctx, Comp(ExtWkn(sigma_cod_ctx), f), ExtVar(sigma_cod_ctx))
  // `f_unit` sends the domain induction target type to the codomain induction target type.
  & SubstTy(f_unit, sigma_dom) = sigma_cod
  =>
  // Then the substitution of the domain induction term is the codomain induction term.
  SubstTm(f_unit, ui_dom) = ui_cod
  ;

// The equality type.
Func Eq: Tm * Tm -> Ty;
// The reflexivity term.
Func Refl: Tm -> Tm;

// The context of the equality type.
Axiom TyCtx(Eq(s, _)) ~> TyCtx(TmTy(s));
Axiom TyCtx(Eq(_, t)) ~> TyCtx(TmTy(t));
// The type of the reflexivity term.
Axiom TmTy(Refl(s)) ~> Eq(s, s);
// Substitution stability of the equality type and reflexivity term.
Axiom SubstTy(f, Eq(s, t)) ~> Eq(SubstTm(f, s), SubstTm(f, t));
Axiom SubstTm(f, Refl(s)) ~> Refl(SubstTm(f, s));
// Equality reflection, part one: If there is a term of the equality type for
// s and t, then s and t are equal.
Axiom TmTy(_) = Eq(s, t) => s = t;
// Equality reflection, part two: Every two terms of and equality type are equal.
Axiom e = Eq(s, s) & TmTy(r_1) = e & TmTy(r_2) = e => r_1 = r_2;

// The type of booleans.
Func Bool: Ctx -> Ty;
Func FalseTm : Ctx -> Tm;
Func TrueTm : Ctx -> Tm;
// Boolean elimination, i.e. "if - else -". Takes
// - the type to eliminate into, which must live a context extended by a variable of type `Bool`,
// - the result for `FalseTm`,
// - the result for `TrueTm`.
// Returns a term in the extended context.
Func BoolInd : Ty * Tm * Tm -> Tm;

// The context of the bool type.
Axiom TyCtx(Bool(ctx)) ~> ctx;
// The types of the true and false terms.
Axiom TmTy(FalseTm(ctx)) ~> Bool(ctx);
Axiom TmTy(TrueTm(ctx)) ~> Bool(ctx);
// Substitution stability of the bool type.
Axiom SubstTy(f, Bool(Dom(f))) ~> Bool(Cod(f));
// Substitution stability of the false and true terms.
Axiom SubstTm(f, FalseTm(Dom(f))) ~> FalseTm(Cod(f));
Axiom SubstTm(f, TrueTm(Dom(f))) ~> TrueTm(Cod(f));
// The type of bool induction.
Axiom TmTy(BoolInd(sigma, _, _)) ~> sigma;
// Evaluation rules for BoolInd: One for substituting false, on for substituting true.
Axiom 
	c = BoolInd(sigma, false_case, _) &
	f_false = ExtMor(TyCtx(sigma), f, FalseTm(Cod(f)))
	=>
	SubstTm(f_false, c) ~> SubstTm(f, false_case)
	;
Axiom 
	c = BoolInd(sigma, _, true_case) &
	f_true = ExtMor(TyCtx(sigma), f, TrueTm(Cod(f)))
	=>
	SubstTm(f_true, c) ~> SubstTm(f, true_case)
	;

// Implicitly adding morphisms to detect substitutions of bool inductions.
Axiom
  // There is a bool induction term `bi_dom`.
  & bi_dom = BoolInd(sigma_dom, true_case, false_case)
  // Its type lives in context `sigma_dom_ctx`.
  & sigma_dom_ctx = TyCtx(sigma_dom)
  // There is a morphism `f` with domain the base of `sigma_dom_ctx`.
  & Dom(f) = BaseCtx(sigma_dom_ctx)
  // `f` is a morphism into an active context.
  & ActiveCtx(Cod(f))
  // There is a bool induction term whose two cases are given by the substitutions of the two
  // cases of the previous BoolInd. This automatically implies that `sigma_cod` must live in a
  // context extension of the codomain of f by Bool.
  & bi_cod = BoolInd(sigma_cod, SubstTm(f, true_case), SubstTm(f, false_case))
  // `sigma_cod_ctx` is the context of `bi_cod` and `sigma_cod`.
  & sigma_cod_ctx = TyCtx(sigma_cod)
  // The domain bool induction is applied to some discriminee.
  & SubstTm(ExtMor(sigma_dom_ctx, Id(_), discriminee_dom), bi_dom)!
  // ... and so is the codomain bool induction.
  & SubstTm(ExtMor(sigma_cod_ctx, Id(_), SubstTm(f, discriminee_dom)), bi_cod)!
  =>
  // Then we have that the map
  //
  //   f.Bool : Dom(f).Bool -> Cod(f).Bool
  //
  // is defined that is given by sending the variable for the domain to the variable in the
  // codomain.
  ExtMor(sigma_dom_ctx, Comp(ExtWkn(sigma_cod_ctx), f), ExtVar(sigma_cod_ctx))!
  ;

// Substitution stability of bool induction.
Axiom
  // There is a bool induction term `bi_dom`.
  & bi_dom = BoolInd(sigma_dom, true_case, false_case)
  // It and its type livesi in context `sigma_dom_ctx`.
  & sigma_dom_ctx = TyCtx(sigma_dom)
  // There is a morphism with domain the base context of `sigma_dom_ctx`.
  & Dom(f) = BaseCtx(sigma_dom_ctx)
  // The codomain of `f` is active.
  & ActiveCtx(Cod(f))
  // There is a bool induction term `bi_cod` given by the substitutions of the two cases along `f`.
  // This implies that `bi_cod` must live in a context extension of Cod(f) by Bool.
  & bi_cod = BoolInd(sigma_cod, SubstTm(f, true_case), SubstTm(f, false_case))
  // `sigma_cod_ctx` is the context of `bi_cod` and `sigma_cod`.
  & sigma_cod_ctx = TyCtx(sigma_cod)
  // `f_bool` is the evident map `Dom(f).Bool -> Cod(f).Bool`.
  & f_bool = ExtMor(sigma_dom_ctx, Comp(ExtWkn(sigma_cod_ctx), f), ExtVar(sigma_cod_ctx))
  // `f_bool` sends the domain induction target type to the codomain induction target type.
  & SubstTy(f_bool, sigma_dom) = sigma_cod
  =>
  // Then the substitution of the domain induction term is the codomain induction term.
  SubstTm(f_bool, bi_dom) = bi_cod
  ;


// The type of natural numbers.
Func Nat: Ctx -> Ty;
Func Zero : Ctx -> Tm;
Func Succ : Tm -> Tm;
// Natural induction. Parameters:
// - The type `sigma` to eliminate into, which must live a context extended by a variable of type `Nat`.
// - The result term for `Zero` in the base context. Must have the type `sigma[Zero]`.
// - The result term for `Succ(n)`. Must live in an extension of the base context by a variable
//   `n : Nat` and `prev : `sigma[n]`. Must have the type `sigma[n + 1]`.
// Returns a term in the extended context.
Func NatInd : Ty * Tm * Tm -> Tm;

// The context of the Nat type.
Axiom TyCtx(Nat(ctx)) ~> ctx;

// The types of Zero, Succ and BoolInd terms.
Axiom TmTy(Zero(ctx)) ~> Nat(ctx);
Axiom TmTy(Succ(n)) ~> TmTy(n);
Axiom TmTy(BoolInd(sigma, _, _)) ~> sigma;

// Substitution stability of the Nat type.
Axiom SubstTy(f, Nat(Dom(f))) ~> Nat(Cod(f));

// Substitution stability of Zero and Succ terms.
Axiom SubstTm(f, Zero(Dom(f))) ~> Zero(Cod(f));
Axiom SubstTm(f, Succ(n)) ~> Succ(SubstTm(f, n));

// Evaluation rules for NatInd: One for substituting Zero, one for substituting Succ(n).
Axiom 
	c = NatInd(sigma, zero_case, _)
	& f_zero = ExtMor(TyCtx(sigma), f, Zero(Cod(f)))
	=>
	SubstTm(f_zero, c) ~> SubstTm(f, zero_case)
	;
Axiom 
	c = NatInd(sigma, _, succ_case)
  & sigma_ctx = TyCtx(sigma)
	& f_succ = ExtMor(sigma_ctx, f, Succ(n))
  & f_n = ExtMor(TyCtx(sigma), f, n)
  & f_n_result = SubstTm(f_n, c)
  & succ_ctx = TyCtx(TmTy(succ_case))
  & g_n = ExtMor(BaseCtx(succ_ctx), f, n)
  & g_n_prev = ExtMor(succ_ctx, g_n, f_n_result)
	=>
  SubstTm(f_succ, c) ~> SubstTm(g_n_prev, succ_case)
	;
